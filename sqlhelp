using System;
using System.Collections.Generic;
using System.Data;
using System.Data.Odbc;
using System.Data.OleDb;
using System.Data.SqlClient;
using System.Linq;
using System.Text;


namespace LinktelDataTransporter
{
    public static class SQLHelper
    {
        private static string conn178String = "Driver={PostgreSQL UNICODE};server=172.19.92.178;port=5432;database=Development DB;uid=postgres;pwd=postgres";
        private static string conn178String64 = "Driver={PostgreSQL UNICODE(x64)};server=172.19.92.178;port=5432;database=Development DB;uid=postgres;pwd=postgres";
        private static string conn4String = "Driver={PostgreSQL UNICODE};server=172.19.93.4;port=5432;database=whitebase;uid=whitebase;pwd=whitebase";
        private static string conn4String64 = "Driver={PostgreSQL UNICODE(x64)};server=172.19.93.4;port=5432;database=whitebase;uid=whitebase;pwd=whitebase";
        //更新数据到DB
        public static int UpdateToDB(string sql)
        {
            OdbcConnection conn = new OdbcConnection(conn178String);
            OdbcCommand cmd = new OdbcCommand(sql, conn);
            try
            {
                conn.Open();
                return cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            {

                throw ex;
            }
            finally
            {
                conn.Close();
            }


        }

        public static void ExectueNonquery(string sql)
        {

            OdbcConnection conn = new OdbcConnection(conn4String);
            OdbcCommand cmd = new OdbcCommand(sql, conn);
            try
            {
                conn.Open();
                cmd.ExecuteNonQuery();
            }
            catch (Exception ex)
            {
                throw ex;
            }
            finally
            {
                conn.Close();
                conn.Dispose();
            }

        }

        //获得多个结果集
        public static DataTable GetDataTableFromDB(string sql)
        {
            OdbcConnection conn = new OdbcConnection(conn4String);
            OdbcCommand cmd = new OdbcCommand(sql, conn);
            OdbcDataReader dataReader;
            DataTable dt = new DataTable();
            try
            {
                conn.Open();
                dataReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
            }
            catch (Exception ex)
            {

                throw ex;
            }

            if (dataReader.HasRows)
            {
                dt.Rows.Clear();
                dt.Load(dataReader);
                dataReader.Close();
            }
            return dt;
        }

        //获得多个结果集
        public static DataTable GetDataTableFrom178DB(string sql)
        {
            OdbcConnection conn = new OdbcConnection(conn178String);
            OdbcCommand cmd = new OdbcCommand(sql, conn);
            OdbcDataReader dataReader;
            DataTable dt = new DataTable();
            try
            {
                conn.Open();
                dataReader = cmd.ExecuteReader(CommandBehavior.CloseConnection);
            }
            catch (Exception ex)
            {

                throw ex;
            }

            if (dataReader.HasRows)
            {
                dt.Rows.Clear();
                dt.Load(dataReader);
                dataReader.Close();
            }
            return dt;
        }

        //返回结果集的第一行第一列值
        public static object ExecuteScalar(string sql)
        {
            object result = null;
            OdbcConnection conn = new OdbcConnection(conn178String);
            OdbcCommand cmd = new OdbcCommand(sql, conn);
            try
            {
                conn.Open();
                result = cmd.ExecuteScalar();
            }
            catch (Exception ex)
            {

                throw ex;
            }
            finally
            {
                conn.Close();
            }
            return result;
        }
    }

}
